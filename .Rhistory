# sunplot series
plot(sunspot.year, xlab='t', ylab='Sunsplots')
# bruit blanc gaussien de loi N(0, 3^2)
set.seed(1789)
plot(ts(rnorm(100, sd=3), start=1, end=100), xlab='t', ylab='Bruit blanc gaussien de variance 9')
abline(h=0)
# série uspop
plot(uspop, xlab='t', ylab='Uspop')
# série airpass
plot(AirPassengers, xlab='t', ylab='Airpass')
plot(log(AirPassengers), xlab='t', ylab='Airpass')
# série beer
beer = read.csv("datasets/beer.csv", header=F, dec=".", sep=",")
beer = ts(beer[, 2], start=1956, freq=12)
plot(beer, xlab = "t", ylab = "Beer")
# série lynx
plot(lynx, xlab="t", ylab="Lynx")
x = AirPassengers
y = log(x)
# base tendencielle
t = 1:144
# base saisonnière (une indicatrice s pour chaque moi)
for (i in 1:12)
{
su = rep(0, times=12) # un vecteur de 12 éléments
su[i] = 1 # l'élément correspondant au mois reçoit 1
s = rep(su, times=12) # 12 vecteurs pour 12 mois
assign(paste("s", i, sep=""), s)
}
# régression linéaire Y(t) = a + bt + sigma(ci*l)
# ==> pas de a, b et ci sont à trouver
reg = lm(y~t+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12-1)
summary(reg)
# obtenir les coefficients
reg$coefficients
a = mean(reg$coefficients[2:13])
b = reg$coefficients[1]
c = reg$coefficients[2:13] - mean(reg$coefficients[2:13])
# obtenir la série corrigée de variations saisonnières
y_cvs = y - (c[1]*s1 + c[2]*s2+c[3]*s3+c[4]*s4+c[5]*s5+c[6]*s6+c[7]*s7+c[8]*s8+c[9]*s9+c[10]*s10+c[11]*s11+c[12]*s12)
# série initiale
x_cvs = exp(y_cvs)
# plot
ts.plot(x, x_cvs, xlab="t", ylab="Airpass")
# plot
ts.plot(x, x_cvs, xlab="t", ylab="Airpass", col=c(1,2), lwd=c(1,2))
legend("topleft", legend=c("X", "X_CVS"), col=c(1,2), lwd = c(1,2) )
x = AirPassengers
y = log(x)
help(decompose)
plot(decomp_x)
decomp_x = decompose(x, type="multiplicative")
plot(decomp_x)
decomp_y = decompose(y, type="additive")
plot(decomp_y)
x_cvs = exp(y-decomp_y$seasonal)
ts.plot(x, x_cvs, xlab="t", ylab="Airpass", col=c(1,2), lwd=c(1,2))
legend("topleft", legend=c("X", "X_CVS"), col=c(1,2), lwd=c(1,2))
help(ets)
# prédiction
library(forecast)
# prédiction
install.packages("forecast")
library(forecast)
les = ets(y, model="ANN")
help(ets)
les.pred = predict(les, 12)
plot(les.pred)
les_alt1 = ets(y, alpha=0.1, model="ANN") # coefficient de lissage = 0.9
plot(les_alt1)
les_alt2 = ets(y, alpha=0.9, model="ANN") # coef = 0.1
plot(les_alt2)
led = ets(y, model="AAN")
led.pred = predict(led, 12)
plot(led.pred)
hw = ets(x, model="AAA")
hw.pred = predict(hw, 12)
plot(hw.pred)
hw = ets(x, model="MMM")
hw.pred = predict(hw, 12)
plot(hw.pred)
library(latex2exp)
install.packages("latex2exp")
install.packages("caschrono")
library(latex2exp)
library(caschrono)
nlag = 36
sais=12
x = AirPassengers
plot(AirPassengers, xlab="t", ylab="", main=TeX("$X_t$"))
y = log(x)
plot(log(AirPassengers), xlab="t", ylab="", main=TeX("$\\ln\\left(X_t\\righ
y = log(x)
plot(log(AirPassengers), xlab="t", ylab="", main=TeX("$\\ln\\left(X_t\\right)$"))
plot(y, xlab="t", ylab="", main=TeX("$\\ln\\left(X_t\\right)$"))
acf = acf(y, lag, max=nlag, plot=FALSE)
acf$lag = acf$lag*sais
acf = acf(y, lag.max=nlag, plot=FALSE)
acf$lag = acf$lag*sais
plot(acf, ci=0.05, xlim=c(2, nlag-1), ylim=c(-1,1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lawd=5, xlab="h", ylab="ACF",
main=TeX("$\\ln\\left(X_t\\right)$"))
plot(acf, ci=0.05, xlim=c(2, nlag-1), ylim=c(-1,1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="h", ylab="ACF",
main=TeX("$\\ln\\left(X_t\\right)$"))
y_dif_1 = diff(y, lag=1, differences=1) # retard 1, différencier une seule fois
acf = acf(y_dif_1, lag.max=nlag, plot=FALSE)
acf$lag = acf$lag*sais
plot(acf, ci=0.05, xlim=c(2, nlag-1), ylim=c(-1, 1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="h", ylab="ACF",
main=TeX("$(I-B)\\ln\\left(X_t\\right)$"))
# différencier ordre 12
y_dif_1_12 = diff(y_dif_1, lag=12, differences=1)
acf = acf(y_dif_1_12, lag.max=nlag, plot=FALSE)
acf$lag = acf$lag*sais
plot(acf, ci=0.05, xlim=c(2, nlag-1), ylim=c(-1, 1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="h", ylab="ACF",
main=TeX("$(I-B)\\left(I-B^{12}\\right)\\ln\\left(X_t\\right)$"))
plot(acf, ci=0.95, xlim=c(2, nlag-1), ylim=c(-1, 1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="h", ylab=TeX("$\\widehat{\\rho}(h)$"),
main=TeX("$(I-B)\\left(I-B^{12}\\right)\\ln\\left(X_t\\right)$"))
plot(pacf, ci=0.95, xlim=c(2, nlag-1), ylim=c(-1, 1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="h", ylab=TeX("$\\widehat{r}(h)$"),
main=TeX("$(I-B)\\left(I-B^{12}\\right)\\ln\\left(X_t\\right)$"))
pacf = pacf(y_dif_1_12, lag.max = nlag, plot=FALSE)
pacf$lag = pacf$lag*sais
plot(pacf, ci=0.95, xlim=c(2, nlag-1), ylim=c(-1, 1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="h", ylab=TeX("$\\widehat{r}(h)$"),
main=TeX("$(I-B)\\left(I-B^{12}\\right)\\ln\\left(X_t\\right)$"))
model1 = Arima(y, order=c(1,1,1), list(order=c(1,1,1), period=12),
include.mean=FALSE, method="CSS-ML")
summary(model1)
model1 = Arima(y, order=c(1,1,1), list(order=c(1,1,1), period=12),
include.mean=FALSE, method="CSS-ML")
library(forecast)
model1 = Arima(y, order=c(1,1,1), list(order=c(1,1,1), period=12),
include.mean=FALSE, method="CSS-ML")
summary(model1)
# tester la significativité des paramètres du modèle
t_stat(model1)
# test de blancheur
Box.test.2(model1$residuals, nlag=c(6, 12, 18, 24, 30, 36),
type="Ljung-Box", decim=5)
model2 = Arima(y, order=c(1,1,1), list(order=c(0,1,1), period=12),
include.mean=FALSE, method="CSS-ML")
summary(model2)
t_stat(model2)
Box.test.2(model2$residuals, nlag=c(6, 12, 18, 24, 30, 36),
type="Ljung-Box", decim=5)
model3 = Arima(y, order=c(0,1,1), list(order=c(0,1,1), period=12),
include.mean=FALSE, method="CSS-ML")
summary(model3)
t_stat(model3)
Box.test.2(model3$residuals, nlag=c(6, 12, 18, 24, 30, 36),
type="Ljung-Box", decim=5)
# vérifier la normalité du résidu
shapiro.test(model3$residuals)
pred_model3 = forecast(model3, h=12, level=95)
pred = ts(c(x[144], exp(pred_model3$mean)), start=c(1960,12), frequency=12)
pred_l=ts(c(x[144], exp(pred_model3$lower)), start=c(1960,12), frequency=12)
pred_u=ts(c(x[144], exp(pred_model3$upper)), start=c(1960,12), frequency = 12)
ts.plot(x, pred, pred_l, pred_u, xlab="t", ylab=" ",
main="Air passengers", col=c(1, 2, 3, 3),
lty=c(1,1,2,2), lwd=c(1,3,2,2))
ts.plot(window(x, start=c(1960,1)), pred, pred_l, pred_u, xlab="t",
ylab=" ", main="Air passengers", col=c(1,2,3,3),
lty=c(1,1,2,2), lwd=c(1,3,2,2))
x_tronc = window(x, end=c(1959,12))
y_tronc = log(x_tronc)
x_a_prevoir = window(x, start=c(1960,1))
model3tronc = Arima(y_tronc, order=c(0,1,1), list(order=c(0,1,1), period=12),
include.mean=FALSE, method="CSS-ML")
summary(model3tronc)
t_stat(model3tronc)
Box.test.2(model3tronc$residuals, nlag=c(6, 12, 18, 24, 30, 36),
type="Ljung-Box", decim=5)
shapiro.test(model3tronc$residuals)
pred_model3tronc = forecast(model3tronc, h=12, level=95)
pred_tronc = ts(exp(pred_model3tronc$mean), start=c(1960,1), frequency=12)
pred_l_tronc=ts(exp(pred_model3tronc$lower), start=c(1960,1), frequency=12)
pred_u_tronc=ts(exp(pred_model3tronc$upper), start=c(1960,1), frequency = 12)
ts.plot(x_a_prevoir, pred_tronc, pred_l_tronc, pred_u_tronc, xlab="t", ylab=" ",
main="Air passengers", col=c(1, 2, 3, 3),
lty=c(1,1,2,2), lwd=c(3,3,2,2))
pred_model3tronc = forecast(model3tronc, h=12, level=95)
pred_tronc = ts(exp(pred_model3tronc$mean), start=c(1960,1), frequency=12)
pred_l_tronc=ts(exp(pred_model3tronc$lower), start=c(1960,1), frequency=12)
pred_u_tronc=ts(exp(pred_model3tronc$upper), start=c(1960,1), frequency = 12)
ts.plot(x_a_prevoir, pred_tronc, pred_l_tronc, pred_u_tronc, xlab="t", ylab=" ",
main="Air passengers", col=c(1, 2, 3, 3),
lty=c(1,1,2,2), lwd=c(3,3,2,2))
legend("topleft", legend=c("X", "X_prev"), col=c(1,2,3,3),
lty=c(1,1), lwd=c(3,3))
legend("topright", legend=c("int95%_inf", "int95%_sup"), col=c(3,3),
lty=c(2,2), lwd=c(2,2))
